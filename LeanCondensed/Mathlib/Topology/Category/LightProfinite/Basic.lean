import Mathlib.Topology.Category.LightProfinite.Basic

universe u

open CategoryTheory Limits Opposite FintypeCat

namespace LightProfinite

instance hasForget‚ÇÇ : HasForget‚ÇÇ LightProfinite TopCat :=
  InducedCategory.hasForget‚ÇÇ _

instance : CoeSort LightProfinite (Type*) :=
  ‚ü®fun X => X.toProfinite‚ü©

@[simp]
lemma forget_ContinuousMap_mk {X Y : LightProfinite} (f : X ‚Üí Y) (hf : Continuous f) :
    (forget Profinite).map (ContinuousMap.mk f hf) = f :=
  rfl

instance {X : LightProfinite} : TotallyDisconnectedSpace X :=
  X.toProfinite.isTotallyDisconnected

example {X : LightProfinite} : CompactSpace X :=
  inferInstance

example {X : LightProfinite} : T2Space X :=
  inferInstance

@[simp]
theorem coe_id (X : LightProfinite) : (ùüô ((forget LightProfinite).obj X)) = id :=
  rfl

@[simp]
theorem coe_comp {X Y Z : LightProfinite} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    ((forget LightProfinite).map f ‚â´ (forget LightProfinite).map g) = g ‚àò f :=
  rfl

@[simp]
theorem coe_comp_apply {X Y Z : LightProfinite} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) :
    ‚àÄ x, (f ‚â´ g) x = g (f x) := by
  intros; rfl

@[simps]
def isoMk {X Y : LightProfinite} (i : X.toProfinite ‚âÖ Y.toProfinite) : X ‚âÖ Y where
  hom := i.hom
  inv := i.inv
  hom_inv_id := i.hom_inv_id
  inv_hom_id := i.inv_hom_id

instance : ReflectsLimits lightToProfinite := inferInstance

instance : ReflectsColimits lightToProfinite := inferInstance

/-- The fully faithful embedding of `LightProfinite` in `TopCat`. -/
@[simps!]
def toTopCat : LightProfinite ‚•§ TopCat :=
  lightToProfinite ‚ãô Profinite.toTopCat
