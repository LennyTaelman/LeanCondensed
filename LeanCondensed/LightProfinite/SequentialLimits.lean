import LeanCondensed.Mathlib.Topology.Category.LightProfinite.EffectiveEpi
import LeanCondensed.LightProfinite.Reindex
import LeanCondensed.LightProfinite.Subcategory

open CategoryTheory Limits

section N_times_N

@[simps]
def Nat.diagonal : ‚Ñï ‚•§ ‚Ñï √ó ‚Ñï where
  obj n := (n, n)
  map f := (f, f)

instance Nat.diagonal_initial : Nat.diagonal.Initial := by
  rw [Functor.initial_iff_of_isCofiltered]
  exact ‚ü®fun ‚ü®n, m‚ü© ‚Ü¶ ‚ü®min n m, ‚ü®‚ü®‚ü®‚ü®by simp‚ü©‚ü©, ‚ü®‚ü®by simp‚ü©‚ü©‚ü©‚ü©‚ü©, fun _ _ ‚Ü¶ ‚ü®_, ùüô _, rfl‚ü©‚ü©

instance Nat.diagonal_final : Nat.diagonal.Final := by
  rw [Functor.final_iff_of_isFiltered]
  exact ‚ü®fun ‚ü®n, m‚ü© ‚Ü¶ ‚ü®max n m, ‚ü®‚ü®‚ü®‚ü®by simp‚ü©‚ü©, ‚ü®‚ü®by simp‚ü©‚ü©‚ü©‚ü©‚ü©, fun _ _ ‚Ü¶ ‚ü®_, ùüô _, rfl‚ü©‚ü©

def Nat.op_diagonal : ‚Ñï·µí·µñ ‚•§ ‚Ñï·µí·µñ √ó ‚Ñï·µí·µñ := diagonal.op ‚ãô (prodOpEquiv _).functor

@[simp]
lemma Nat.op_diagonal_obj (n : ‚Ñï·µí·µñ) : op_diagonal.obj n = (n, n) := rfl

@[simp]
lemma Nat.op_diagonal_map (n m : ‚Ñï·µí·µñ) (f : n ‚ü∂ m) : op_diagonal.map f = (f, f) := rfl

end N_times_N


namespace LightProfinite

universe u

variable {X Y : LightProfinite.{u}} (f : X ‚ü∂ Y)

abbrev levelMap
    (f : (n : ‚Ñï) ‚Üí X.diagram.obj ‚ü®n‚ü© ‚ü∂ Y.diagram.obj ‚ü®n‚ü©)
    (w : ‚àÄ n, f (n + 1) ‚â´ Y.transitionMap n = X.transitionMap n ‚â´ f n) : X ‚ü∂ Y := by
  apply homMk fun n ‚Ü¶ X.proj n ‚â´ fintypeCatToLightProfinite.map (f n)
  intro n
  ext x
  replace w := congrFun (w n) (X.proj (n + 1) x)
  simp at w
  simp
  erw [w, CategoryTheory.comp_apply, ‚Üê proj_comp_transitionMap _ n]
  rfl

lemma levelMap_w (f : (n : ‚Ñï) ‚Üí X.diagram.obj ‚ü®n‚ü© ‚ü∂ Y.diagram.obj ‚ü®n‚ü©)
    (w : ‚àÄ n, f (n + 1) ‚â´ Y.transitionMap n = X.transitionMap n ‚â´ f n) (n : ‚Ñï) :
    levelMap f w ‚â´ Y.proj n = X.proj n ‚â´ fintypeCatToLightProfinite.map (f n) := by
  erw [Y.isLimit.fac]
  rfl

structure levelRepresentation : Type (u + 1) where
  left : LightProfinite
  right : LightProfinite
  leftIso : left ‚âÖ X
  rightIso : right ‚âÖ Y
  map (n : ‚Ñï) : left.diagram.obj ‚ü®n‚ü© ‚ü∂ right.diagram.obj ‚ü®n‚ü©
  w (n : ‚Ñï) : map (n+1) ‚â´ right.transitionMap n = left.transitionMap n ‚â´ map n
  w' : levelMap map w ‚â´ rightIso.hom = leftIso.hom ‚â´ f

class IsLevelRepresentation {Z W : LightProfinite} (g : Z ‚ü∂ W) (i‚ÇÅ : Z ‚âÖ X) (i‚ÇÇ : W ‚âÖ Y)
    (map : (n : ‚Ñï) ‚Üí Z.diagram.obj ‚ü®n‚ü© ‚ü∂ W.diagram.obj ‚ü®n‚ü©) : Prop where
  w : ‚àÄ n, map (n+1) ‚â´ W.transitionMap n = Z.transitionMap n ‚â´ map n
  w' : levelMap map w ‚â´ i‚ÇÇ.hom = i‚ÇÅ.hom ‚â´ f

lemma isLevelRepresentation_w {Z W : LightProfinite} (g : Z ‚ü∂ W) (i‚ÇÅ : Z ‚âÖ X) (i‚ÇÇ : W ‚âÖ Y)
    (map : (n : ‚Ñï) ‚Üí Z.diagram.obj ‚ü®n‚ü© ‚ü∂ W.diagram.obj ‚ü®n‚ü©)
    [h : IsLevelRepresentation f g i‚ÇÅ i‚ÇÇ map]
    (n : ‚Ñï) : map (n + 1) ‚â´ transitionMap W n = transitionMap Z n ‚â´ map n :=
  h.w n

lemma isLevelRepresentation_w' {Z W : LightProfinite} (g : Z ‚ü∂ W) (i‚ÇÅ : Z ‚âÖ X) (i‚ÇÇ : W ‚âÖ Y)
    (map : (n : ‚Ñï) ‚Üí Z.diagram.obj ‚ü®n‚ü© ‚ü∂ W.diagram.obj ‚ü®n‚ü©)
    [h : IsLevelRepresentation f g i‚ÇÅ i‚ÇÇ map] :
    levelMap map (isLevelRepresentation_w f g i‚ÇÅ i‚ÇÇ map) ‚â´ i‚ÇÇ.hom = i‚ÇÅ.hom ‚â´ f :=
  h.w'

@[simps]
def levelRepresentation.mk' {Z W : LightProfinite} (g : Z ‚ü∂ W) (i‚ÇÅ : Z ‚âÖ X) (i‚ÇÇ : W ‚âÖ Y)
    (map : (n : ‚Ñï) ‚Üí Z.diagram.obj ‚ü®n‚ü© ‚ü∂ W.diagram.obj ‚ü®n‚ü©) [IsLevelRepresentation f g i‚ÇÅ i‚ÇÇ map] :
    levelRepresentation f where
  w := isLevelRepresentation_w f g i‚ÇÅ i‚ÇÇ map
  w' := isLevelRepresentation_w' f g i‚ÇÅ i‚ÇÇ map

variable (M : ‚Ñï·µí·µñ ‚•§ LightProfinite.{u})

structure levelRepresentationDiagram : Type (u + 1) where
  left : ‚Ñï·µí·µñ ‚•§ LightProfinite.{u}
  iso (n : ‚Ñï) : left.obj ‚ü®n‚ü© ‚âÖ M.obj ‚ü®n‚ü©
  map (n m : ‚Ñï) : (left.obj ‚ü®n+1‚ü©).diagram.obj ‚ü®m‚ü© ‚Üí (left.obj ‚ü®n‚ü©).diagram.obj ‚ü®m‚ü©
  w (n m : ‚Ñï) : (left.obj ‚ü®n+1‚ü©).proj m ‚â´ fintypeCatToLightProfinite.map (map n m) =
      left.map (homOfLE (Nat.le_succ n)).op ‚â´ (left.obj ‚ü®n‚ü©).proj m
  rep (n : ‚Ñï): IsLevelRepresentation (M.map (homOfLE (Nat.le_succ n)).op)
      (left.map (homOfLE (Nat.le_succ n)).op) (iso (n + 1)) (iso n) (map n)

class IsLevelRepresentationDiagram (L : ‚Ñï·µí·µñ ‚•§ LightProfinite) (i : (n : ‚Ñï) ‚Üí L.obj ‚ü®n‚ü© ‚âÖ M.obj ‚ü®n‚ü©)
    (map : (n m : ‚Ñï) ‚Üí (L.obj ‚ü®n+1‚ü©).diagram.obj ‚ü®m‚ü© ‚Üí (L.obj ‚ü®n‚ü©).diagram.obj ‚ü®m‚ü©) : Prop where
  w (n m : ‚Ñï) : (L.obj ‚ü®n+1‚ü©).proj m ‚â´ fintypeCatToLightProfinite.map (map n m) =
      L.map (homOfLE (Nat.le_succ n)).op ‚â´ (L.obj ‚ü®n‚ü©).proj m
  rep (n : ‚Ñï) : IsLevelRepresentation (M.map (homOfLE (Nat.le_succ n)).op)
      (L.map (homOfLE (Nat.le_succ n)).op) (i (n + 1)) (i n) (map n)

attribute [instance] IsLevelRepresentationDiagram.rep

variable (L : ‚Ñï·µí·µñ ‚•§ LightProfinite) (i : (n : ‚Ñï) ‚Üí L.obj ‚ü®n‚ü© ‚âÖ M.obj ‚ü®n‚ü©)
    (map : (n m : ‚Ñï) ‚Üí (L.obj ‚ü®n+1‚ü©).diagram.obj ‚ü®m‚ü© ‚ü∂ (L.obj ‚ü®n‚ü©).diagram.obj ‚ü®m‚ü©)
    [h : IsLevelRepresentationDiagram M L i map]

lemma isLevelRepresentationDiagram_w (n m : ‚Ñï) :
    (L.obj ‚ü®n+1‚ü©).proj m ‚â´ fintypeCatToLightProfinite.map (map n m) =
    L.map (homOfLE (Nat.le_succ n)).op ‚â´ (L.obj ‚ü®n‚ü©).proj m :=
  h.w n m

lemma isLevelRepresentationDiagram_w_w (n m : ‚Ñï) :
    map n (m + 1) ‚â´ (L.obj ‚ü®n‚ü©).transitionMap m = (L.obj ‚ü®n+1‚ü©).transitionMap m ‚â´ map n m :=
  (isLevelRepresentation_w (M.map (homOfLE (Nat.le_succ n)).op)
    (L.map (homOfLE (Nat.le_succ n)).op) (i (n + 1)) (i n) (map n) m)

@[simps]
def levelRepresentationDiagram.mk' : levelRepresentationDiagram M where
  left := L
  iso := i
  map := map
  w := isLevelRepresentationDiagram_w M L i map
  rep := inferInstance

def iso_of_isLevelRepresentation : L ‚âÖ M where
  hom := natTrans_nat_op_mk (fun n ‚Ü¶ (i n).hom) (by
    intro n
    have : IsLevelRepresentation (M.map (homOfLE (Nat.le_succ n)).op)
      (L.map (homOfLE (Nat.le_succ n)).op) (i (n + 1)) (i n) (map n) := inferInstance
    have w' := this.w'
    have h : IsLevelRepresentationDiagram M L i map := inferInstance
    erw [‚Üê w']
    congr
    apply (_ : LightProfinite).isLimit.hom_ext
    intro ‚ü®m‚ü©
    erw [levelMap_w, h.w]
    rfl)
  inv := natTrans_nat_op_mk (fun n ‚Ü¶ (i n).inv) (by
    intro n
    have : IsLevelRepresentation (M.map (homOfLE (Nat.le_succ n)).op)
      (L.map (homOfLE (Nat.le_succ n)).op) (i (n + 1)) (i n) (map n) := inferInstance
    have w' := this.w'
    rw [‚Üê Iso.inv_comp_eq, ‚Üê Category.assoc, ‚Üê Iso.eq_comp_inv] at w'
    have h : IsLevelRepresentationDiagram M L i map := inferInstance
    erw [‚Üê w']
    congr
    apply (_ : LightProfinite).isLimit.hom_ext
    intro ‚ü®m‚ü©
    erw [levelMap_w, h.w]
    rfl)

def functor : ‚Ñï·µí·µñ ‚•§ ‚Ñï·µí·µñ ‚•§ FintypeCat :=
  Nat.functor_mk (fun n ‚Ü¶ (L.obj ‚ü®n‚ü©).diagram)
    fun n ‚Ü¶ natTrans_nat_op_mk (map n ¬∑)
      fun m ‚Ü¶ (isLevelRepresentationDiagram_w_w M L i map n m).symm

def functor' : ‚Ñï·µí·µñ √ó ‚Ñï·µí·µñ ‚•§ FintypeCat :=
  uncurry.obj (functor M L i map)

def limitFunctor : ‚Ñï·µí·µñ ‚•§ FintypeCat :=
  Nat.op_diagonal ‚ãô functor' M L i map

noncomputable section

lemma hom_ext {X Y : LightProfinite} (f g : X ‚ü∂ Y) (h : ‚àÄ n, f ‚â´ Y.proj n = g ‚â´ Y.proj n) :
    f = g := Y.isLimit.hom_ext fun ‚ü®n‚ü© ‚Ü¶ h n

@[simp]
lemma homMk_comp_proj {X Y : LightProfinite} (f : (n : ‚Ñï) ‚Üí X ‚ü∂ Y.component n)
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n) (n : ‚Ñï) : homMk f w ‚â´ Y.proj n = f n := by
  erw [Y.isLimit.fac]
  rfl

-- TODO: make `LightProfinite.of` universe polymorphic.
variable (M L : ‚Ñï·µí·µñ ‚•§ LightProfinite) (i : (n : ‚Ñï) ‚Üí L.obj ‚ü®n‚ü© ‚âÖ M.obj ‚ü®n‚ü©)
    (map : (n m : ‚Ñï) ‚Üí (L.obj ‚ü®n+1‚ü©).diagram.obj ‚ü®m‚ü© ‚ü∂ (L.obj ‚ü®n‚ü©).diagram.obj ‚ü®m‚ü©)
    [h : IsLevelRepresentationDiagram M L i map]

def limitFunctorProj (n : ‚Ñï) : of (limitFunctor M L i map) ‚ü∂ L.obj { unop := n } := sorry

def limitCone' : Cone L :=
  L.nat_op_cone_mk (of <| limitFunctor M L i map) (fun n ‚Ü¶ limitFunctorProj _ _ _ _ n) sorry

def limitCone : Cone L where
  pt := of <| limitFunctor M L i map
  œÄ := by
    refine natTrans_nat_op_mk ?_ ?_
    ¬∑ intro n
      let f := fun m : ‚Ñï ‚Ü¶ m - n
      have hf : Monotone f := fun _ _ h ‚Ü¶ Nat.sub_le_sub_right h n
      have hf' : ‚àÄ m, (‚àÉ a, m ‚â§ f a) := fun m ‚Ü¶ ‚ü®m + n, (by simp [f])‚ü©
      refine (homMk ?_ ?_) ‚â´ (reindexIso _ f hf hf').inv
      ¬∑ intro m
        refine (_ : LightProfinite).proj m ‚â´
          fintypeCatToLightProfinite.map
            (compose_n (fun k ‚Ü¶ (L.obj ‚ü®k‚ü©).diagram.obj ‚ü®m‚ü©) (fun k ‚Ü¶ map k (m))
              (Nat.sub_le m n) ‚â´ ?_)
        simp [reindex, f]
        sorry
      ¬∑ sorry
    ¬∑ intro m
      simp only [Functor.const_obj_obj, Functor.const_obj_map, Nat.op_diagonal_obj,
        Functor.map_comp, Category.id_comp]
      apply LightProfinite.hom_ext
      intro k
      simp only [Functor.const_obj_obj, Nat.op_diagonal_obj, homMk_comp_proj, Category.assoc]
      erw [‚Üê isLevelRepresentationDiagram_w M L i map]
      symm
      rw [‚Üê Category.assoc]
      simp
      sorry



def index {X Y : LightProfinite.{u}} (f : X ‚ü∂ Y) (n : ‚Ñï) : ‚Ñï :=
  let g := locallyConstant_of_hom f n
  have := Profinite.exists_locallyConstant X.cone X.isLimit g
  max n this.choose.unop

def component_map {X Y : LightProfinite.{u}} (f : X ‚ü∂ Y) (n : ‚Ñï) :
    X.diagram.obj ‚ü®index f n‚ü© ‚ü∂ Y.diagram.obj ‚ü®n‚ü© :=
  let g := locallyConstant_of_hom f n
  have := Profinite.exists_locallyConstant X.cone X.isLimit g
  X.transitionMapLE (le_max_right _ _) ‚â´ this.choose_spec.choose.toFun

def index_seq : ‚Ñï ‚Üí ‚Ñï := by
  intro n
  induction n with
  | zero => exact index (M.map (homOfLE (Nat.le_succ 0)).op) 0
  | succ n ih => exact index (M.map (homOfLE (Nat.le_succ n)).op) ih

def index_seq' (n : ‚Ñï) : ‚Ñï ‚Üí ‚Ñï := by
  induction n with
  | zero => exact index (M.map (homOfLE (Nat.le_succ 0)).op)
  | succ n ih => exact fun m ‚Ü¶ index (M.map (homOfLE (Nat.le_succ n)).op) <| ih m

lemma index_seq_monotone : Monotone (index_seq M) := sorry

def stepMap (n : ‚Ñï) : (M.obj ‚ü®n+1‚ü©).diagram.obj ‚ü®index_seq M (n+1)‚ü© ‚ü∂
    (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®index_seq M n‚ü© :=
  component_map (M.map (homOfLE _).op) _

def cofinal_M : ‚Ñï·µí·µñ ‚•§ LightProfinite.{u} :=
  (Nat.functor_mk' (index_seq M) fun n ‚Ü¶ homOfLE (index_seq_monotone _ (Nat.le_succ n))).op ‚ãô M

def stepMap' (n m : ‚Ñï) : (M.obj ‚ü®n+1‚ü©).diagram.obj ‚ü®index_seq' M (n+1) m‚ü© ‚ü∂
    (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®index_seq' M n m‚ü© :=
  component_map (M.map (homOfLE _).op) _

def stepMap‚ÇÇ (n m : ‚Ñï) : (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®index_seq' M n (m+1)‚ü© ‚ü∂
    (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®index_seq' M n m‚ü© := by
  refine (_ : LightProfinite).transitionMapLE ?_
  induction n with
  | zero => sorry
  | succ n ih => sorry

def stepMap'' (n m : ‚Ñï) : (M.obj ‚ü®n+1‚ü©).diagram.obj ‚ü®index_seq' M (n+1) (m+1)‚ü© ‚ü∂
    (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®index_seq' M n m‚ü© :=
  (_ : LightProfinite).transitionMapLE sorry ‚â´ stepMap' M n m

#exit

def limitCone : Cone M where
  pt := of (Nat.functor_mk (fun n ‚Ü¶ (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®(index_seq' M n n)‚ü©) (fun n ‚Ü¶ stepMap'' M n n))
  -- pt := {
  --   diagram := Nat.functor_mk (fun n ‚Ü¶ (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®(index_seq M n)‚ü©) (stepMap M)
  --   cone := sorry
  --   isLimit := sorry
  -- }
  œÄ := {
    app := fun ‚ü®n‚ü© ‚Ü¶ (by
      simp [of]
      sorry
      )
    naturality := sorry
  }
    -- let Œ± := (limit.cone ((Nat.functor_mk (fun n ‚Ü¶ (M.obj ‚ü®n‚ü©).diagram.obj ‚ü®(index_seq M n)‚ü©)
    --   (stepMap M)) ‚ãô FintypeCat.toProfinite)).œÄ




noncomputable def functor : ‚Ñï·µí·µñ √ó ‚Ñï·µí·µñ ‚•§ FintypeCat where
  obj n := (M.obj n.1).diagram.obj ‚ü®(index (M.map (homOfLE (Nat.le_succ n.1.unop)).op) n.2.unop)‚ü©
  map := sorry
  map_id := sorry
  map_comp := sorry
  -- obj n := ((M ‚ãô toSurj).obj n.1).diagram.obj n.2
  -- map f := ((M ‚ãô toSurj).obj _).diagram.map f.2 ‚â´ (component_map (M.map f.1) _)

noncomputable
def component_map {X Y : LightProfinite} (f : X ‚ü∂ Y) (n : ‚Ñï) :
    (toSurj.obj X).diagram.obj ‚ü®n‚ü© ‚ü∂ (toSurj.obj Y).diagram.obj ‚ü®n‚ü© :=
  let g := locallyConstant_of_hom (toSurj.map f) n
  have := Profinite.exists_locallyConstant (toSurj.obj X).cone (toSurj.obj X).isLimit g
  let m := this.choose.unop
  let g' : LocallyConstant ((toSurj.obj X).component m) ((toSurj.obj Y).component n) :=
    this.choose_spec.choose
  if hh : m ‚â§ n then
    (toSurj.obj X).transitionMapLE hh ‚â´ g'.1 else
    (section_ ((toSurj.obj X).transitionMapLE
      (le_of_lt (by simpa using hh)))) ‚â´ g'.1

instance (X : LightProfinite) (n : ‚Ñï) : Epi <| (toSurj.obj X).proj n := by
  rw [LightProfinite.epi_iff_surjective]
  exact X.proj_surjective' _

lemma hom_ext_ish (X : LightProfinite) (n : ‚Ñï) (Y : FintypeCat)
    (f g : (toSurj.obj X).diagram.obj ‚ü®n‚ü© ‚ü∂ Y)
    (h : (toSurj.obj X).proj n ‚â´ fintypeCatToLightProfinite.map f =
      (toSurj.obj X).proj n ‚â´ fintypeCatToLightProfinite.map g) : f = g := by
  apply fintypeCatToLightProfinite.map_injective
  rwa [cancel_epi] at h

lemma comp_eq_of_comap_eq {X Y : LightProfinite} {Z : FintypeCat} (f : X ‚ü∂ Y)
    (g‚ÇÅ : LocallyConstant X Z.toLightProfinite) (g‚ÇÇ : LocallyConstant Y Z.toLightProfinite)
    (h : g‚ÇÇ.comap f = g‚ÇÅ) :
    f ‚â´ (‚ü®g‚ÇÇ.1, g‚ÇÇ.2.continuous‚ü© : Y ‚ü∂ Z.toLightProfinite) = ‚ü®g‚ÇÅ.1, g‚ÇÅ.2.continuous‚ü© := by
  ext x
  change g‚ÇÇ.1 (f x) = g‚ÇÅ.1 x
  rw [‚Üê LocallyConstant.coe_inj] at h
  simp only [concreteCategory_forget_obj, LocallyConstant.toFun_eq_coe]
  erw [‚Üê congrFun h x]
  exact (LocallyConstant.coe_comap_apply _ _ f.continuous _).symm

lemma component_map_eq_of_bla {X Y : LightProfinite} {n : ‚Ñï}
    (f : X ‚ü∂ Y)
    (g : (toSurj.obj X).diagram.obj ‚ü®n‚ü© ‚ü∂ (toSurj.obj Y).diagram.obj ‚ü®n‚ü©)
    (h : (toSurj.obj X).proj n ‚â´ fintypeCatToLightProfinite.map g = f ‚â´ (toSurj.obj Y).proj n) :
    component_map f n = g := by
  let g'' := locallyConstant_of_hom (toSurj.map f) n
  have := Profinite.exists_locallyConstant (toSurj.obj X).cone (toSurj.obj X).isLimit g''
  let m := this.choose.unop
  let g' : LocallyConstant ((toSurj.obj X).component m) ((toSurj.obj Y).component n) :=
    this.choose_spec.choose
  have hhh : g'' = g'.comap ((toSurj.obj X).proj m) := this.choose_spec.choose_spec
  simp only [component_map]
  split_ifs with hh
  ¬∑ apply hom_ext_ish
    suffices proj (toSurj.obj X) n ‚â´ transitionMapLE' (toSurj.obj X) hh ‚â´ ‚ü®g'.1, g'.2.continuous‚ü© =
        proj (toSurj.obj X) n ‚â´ fintypeCatToLightProfinite.map g by exact this
    rw [reassoc_of% proj_comp_transitionMapLE', comp_eq_of_comap_eq _ _ _ hhh.symm, h]
    rfl
  ¬∑ have hh' : n ‚â§ m := le_of_lt (by simpa using hh)
    rw [‚Üê Category.id_comp g, ‚Üê IsSplitEpi.id (transitionMapLE (toSurj.obj X) hh'), Category.assoc]
    congr
    apply hom_ext_ish
    simp [-toSurj_obj]
    suffices proj (toSurj.obj X) m ‚â´ transitionMapLE' (toSurj.obj X) hh' ‚â´
        fintypeCatToLightProfinite.map g =
        proj (toSurj.obj X) m  ‚â´ ‚ü®g'.1, g'.2.continuous‚ü© by exact this.symm
    rw [‚Üê Category.assoc, proj_comp_transitionMapLE', comp_eq_of_comap_eq _ _ _ hhh.symm, h]
    rfl

@[simp]
lemma component_map_id (X : LightProfinite) (n : ‚Ñï) : component_map (ùüô X) n = ùüô _ := by
  apply component_map_eq_of_bla
  rfl

lemma component_map_w {X Y : LightProfinite} (f : X ‚ü∂ Y) {n m : ‚Ñï} (h : n ‚â§ m) :
    component_map f m ‚â´ (toSurj.obj Y).diagram.map ‚ü®(homOfLE h)‚ü© =
    (toSurj.obj X).diagram.map ‚ü®(homOfLE h)‚ü© ‚â´ component_map f n := sorry

lemma proj_comp_section_transitionMapLE' (S : LightProfinite) {n m : ‚Ñï} (h : n ‚â§ m) :
    (toSurj.obj S).proj n ‚â´ fintypeCatToLightProfinite.map
      (section_ ((toSurj.obj S).transitionMapLE h)) =
        (toSurj.obj S).proj m := by
  sorry -- not true

lemma component_map_w' {X Y : LightProfinite} (f : X ‚ü∂ Y) (n : ‚Ñï)  :
    (toSurj.obj X).proj n ‚â´ fintypeCatToLightProfinite.map (component_map f n) =
    f ‚â´ (toSurj.obj Y).proj n := by
  let g'' := locallyConstant_of_hom (toSurj.map f) n
  have := Profinite.exists_locallyConstant (toSurj.obj X).cone (toSurj.obj X).isLimit g''
  let m := this.choose.unop
  let g' : LocallyConstant ((toSurj.obj X).component m) ((toSurj.obj Y).component n) :=
    this.choose_spec.choose
  have hhh : g'' = g'.comap ((toSurj.obj X).proj m) := this.choose_spec.choose_spec
  have := comp_eq_of_comap_eq _ _ _ hhh.symm
  simp only [component_map]
  split_ifs with hh
  ¬∑ suffices proj (toSurj.obj X) n ‚â´ transitionMapLE' (toSurj.obj X) hh ‚â´ ‚ü®g'.1, g'.2.continuous‚ü© =
        f ‚â´ proj (toSurj.obj Y) n by exact this
    rw [reassoc_of% proj_comp_transitionMapLE', comp_eq_of_comap_eq _ _ _ hhh.symm]
    rfl
  ¬∑ simp only [Functor.map_comp]
    rw [reassoc_of% proj_comp_section_transitionMapLE']
    change proj _ _ ‚â´ ‚ü®g'.1, g'.2.continuous‚ü© = _
    rw [comp_eq_of_comap_eq _ _ _ hhh.symm]
    rfl

@[simp]
lemma component_map_comp {X Y Z : LightProfinite} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (n : ‚Ñï) :
    component_map (f ‚â´ g) n = component_map f n ‚â´ component_map g n := by
  apply component_map_eq_of_bla
  simp only [Functor.map_comp, ‚Üê Category.assoc]
  rw [component_map_w' f n]
  erw [Category.assoc, Category.assoc (f := f), component_map_w' g n]

-- This definition won't work...
noncomputable def functor : ‚Ñï·µí·µñ √ó ‚Ñï·µí·µñ ‚•§ FintypeCat where
  obj n := ((M ‚ãô toSurj).obj n.1).diagram.obj n.2
  map f := ((M ‚ãô toSurj).obj _).diagram.map f.2 ‚â´ (component_map (M.map f.1) _)
  map_comp f g := by
    have : (component_map (M.map f.1) _) ‚â´ ((M ‚ãô toSurj).obj _).diagram.map g.2 =
        ((M ‚ãô toSurj).obj _).diagram.map g.2 ‚â´ (component_map (M.map f.1) _) := component_map_w _ _
    simp only [Functor.comp_obj, prod_Hom, prod_comp, Functor.map_comp, component_map_comp,
      Category.assoc]
    rw [reassoc_of% this]

def limitCone : Cone M where
  pt := {
    diagram := {
      obj := fun n ‚Ü¶ (M.obj n).diagram.obj n
      map := @fun n m f ‚Ü¶ (by
        --fun f n ‚Ü¶ (M.obj _).diagram.map f
        simp
        refine (M.obj n).diagram.map f ‚â´ ?_
        let g := M.map f
        sorry
        )
      map_id := sorry
      map_comp := sorry
    }
    cone := sorry
    isLimit := sorry
  }
  œÄ := sorry
