import Mathlib.Topology.Category.LightProfinite.IsLight
import Mathlib.CategoryTheory.Limits.FintypeCat
import LeanCondensed.LightProfinite.Reindex

open CategoryTheory Limits Function Profinite

namespace LightProfinite

variable (S : LightProfinite)

def component (n : ‚Ñï) : LightProfinite := fintypeCatToLightProfinite.obj <| S.diagram.obj ‚ü®n‚ü©

def transitionMap (n : ‚Ñï) : S.diagram.obj ‚ü®n+1‚ü© ‚ü∂ S.diagram.obj ‚ü®n‚ü© :=
  S.diagram.map ‚ü®homOfLE (Nat.le_succ _)‚ü©

def transitionMapLE {n m : ‚Ñï} (h : n ‚â§ m) : S.diagram.obj ‚ü®m‚ü© ‚ü∂ S.diagram.obj ‚ü®n‚ü© :=
  S.diagram.map ‚ü®homOfLE h‚ü©

def transitionMap' (n : ‚Ñï) :  S.component (n+1) ‚ü∂ S.component n :=
  fintypeCatToLightProfinite.map (S.transitionMap n)

def transitionMapLE' {n m : ‚Ñï} (h : n ‚â§ m) : S.component m ‚ü∂ S.component n :=
  fintypeCatToLightProfinite.map (S.transitionMapLE h)

noncomputable def iso : S ‚âÖ ofIsLight S.toProfinite := isoMk <| (Iso.refl _)

lemma transitionMap_surjective_aux {T : Profinite} [T.IsLight] {d e : DiscreteQuotient T}
    (h : d ‚â§ e) : Surjective (T.diagram.map (homOfLE h)) :=
  Surjective.of_comp (g := d.proj) e.proj_surjective

lemma transitionMap_surjective (T : Profinite) [T.IsLight] (n : ‚Ñï) :
    Surjective ((ofIsLight T).transitionMap n) :=
  transitionMap_surjective_aux (sequentialFunctor_map _ (Nat.le_succ _))

lemma _root_.CategoryTheory.FintypeCat.epi_iff_surjective {X Y : FintypeCat} (f : X ‚ü∂ Y) :
    Epi f ‚Üî Surjective f := by
  change _ ‚Üî Surjective (FintypeCat.incl.map f)
  rw [‚Üê CategoryTheory.epi_iff_surjective]
  refine ‚ü®fun _ ‚Ü¶ inferInstance, FintypeCat.incl.epi_of_epi_map‚ü©

instance (T : Profinite) [T.IsLight] (n : ‚Ñï) :
    Epi ((ofIsLight T).transitionMap n) := by
  rw [FintypeCat.epi_iff_surjective]
  exact transitionMap_surjective T n

instance (T : Profinite) [T.IsLight] {n m : ‚Ñï} (h : n ‚â§ m) :
    Epi ((ofIsLight T).transitionMapLE h) := by
  induction h with
  | refl =>
    change Epi ((ofIsLight T).diagram.map (ùüô _))
    simp only [CategoryTheory.Functor.map_id]
    infer_instance
  | @step k h ih =>
    have : Epi ((transitionMap (ofIsLight T) k ‚â´
      (transitionMapLE (ofIsLight T) h))) := epi_comp _ _
    convert this
    simp only [transitionMapLE, transitionMap, ‚Üê Functor.map_comp]
    congr

noncomputable def _root_.CategoryTheory.FintypeCat.splitEpi_of_epi {X Y : FintypeCat}
    (f : X ‚ü∂ Y) [Epi f] : SplitEpi f where
  section_ := surjInv ((FintypeCat.epi_iff_surjective f).1 inferInstance)
  id := by ext; exact surjInv_eq _ _

instance : SplitEpiCategory FintypeCat where
  isSplitEpi_of_epi f _ := ‚ü®‚ü®FintypeCat.splitEpi_of_epi f‚ü©‚ü©

instance {X Y : FintypeCat} (f : X ‚ü∂ Y) [Epi f] : IsSplitEpi f := isSplitEpi_of_epi f

def proj (n : ‚Ñï) : S ‚ü∂ S.component n := S.cone.œÄ.app ‚ü®n‚ü©

lemma proj_surjective_aux {T : Profinite} (d : DiscreteQuotient T) :
    Surjective (T.asLimitCone.œÄ.app d) :=
  DiscreteQuotient.proj_surjective _

lemma proj_surjective (T : Profinite) [IsLight T] (n : ‚Ñï) : Surjective ((ofIsLight T).proj n) :=
  DiscreteQuotient.proj_surjective _

@[simp, reassoc]
lemma proj_comp_transitionMap' (n : ‚Ñï) : S.proj (n + 1) ‚â´ S.transitionMap' n = S.proj n :=
  S.cone.w (homOfLE (Nat.le_succ n)).op

@[simp]
lemma proj_comp_transitionMap (n : ‚Ñï) : S.transitionMap n ‚àò S.proj (n + 1)  = S.proj n := by
  rw [‚Üê S.proj_comp_transitionMap' n, transitionMap]
  rfl

@[simp]
lemma proj_comp_transitionMap_assoc (n : ‚Ñï) {Y : LightProfinite} (f : Y ‚Üí S) :
    S.transitionMap n ‚àò S.proj (n + 1) ‚àò f  = S.proj n ‚àò f := by
  rw [‚Üê S.proj_comp_transitionMap' n, transitionMap]
  rfl

@[simp]
lemma proj_comp_transitionMapLE' {n m : ‚Ñï} (h : n ‚â§ m) :
    S.proj m ‚â´ S.transitionMapLE' h = S.proj n :=
  S.cone.w (homOfLE h).op

@[simp]
lemma proj_comp_transitionMapLE {n m : ‚Ñï} (h : n ‚â§ m) :
    S.transitionMapLE' h ‚àò S.proj m  = S.proj n := by
  rw [‚Üê S.proj_comp_transitionMapLE' h]
  rfl

@[simp]
lemma proj_comp_transitionMapLE'' {n m : ‚Ñï} (h : n ‚â§ m) :
    S.transitionMapLE h ‚àò S.proj m  = S.proj n := by
  rw [‚Üê S.proj_comp_transitionMapLE' h]
  rfl

-- lemma natTrans_nat_op_mk_comp {C : Type*} [Category C] {F G H : ‚Ñï·µí·µñ ‚•§ C}
--     (f : (n : ‚Ñï) ‚Üí F.obj ‚ü®n‚ü© ‚ü∂ G.obj ‚ü®n‚ü©) (g : (n : ‚Ñï) ‚Üí G.obj ‚ü®n‚ü© ‚ü∂ H.obj ‚ü®n‚ü©)
--     (w : ‚àÄ n, F.map ‚ü®homOfLE (Nat.le_succ _)‚ü© ‚â´ f n = f (n + 1) ‚â´ G.map ‚ü®homOfLE (Nat.le_succ _)‚ü©)
--     (w' : ‚àÄ n, G.map ‚ü®homOfLE (Nat.le_succ _)‚ü© ‚â´ g n = g (n + 1) ‚â´ H.map ‚ü®homOfLE (Nat.le_succ _)‚ü©)
--     (n : ‚Ñï) :
--     (natTrans_nat_op_mk f w).app ‚ü®n‚ü© ‚â´ (natTrans_nat_op_mk g w).app ‚ü®n‚ü© =

def fromProfinite {X : Profinite} {Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí X ‚ü∂ (Y.component n).toProfinite)
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n) : X ‚ü∂ Y.toProfinite :=
  let c : Cone (Y.diagram ‚ãô FintypeCat.toProfinite) := ‚ü®X, natTrans_nat_op_mk f
    (by intro n; ext; exact congrFun (w n).symm _)‚ü©
  Y.isLimit.lift c

-- def fromProfiniteLE {X : Profinite} {Y : LightProfinite} (m : ‚Ñï)
--     (f : (n : ‚Ñï) ‚Üí m ‚â§ n ‚Üí (X ‚ü∂ (Y.component n).toProfinite))
--     (w : ‚àÄ n (h : m ‚â§ n), Y.transitionMap n ‚àò f (n + 1) (h.trans (Nat.le_succ n)) = f n h) :
--     X ‚ü∂ Y.toProfinite := by
--   refine fromProfinite ?_ ?_
--   intro n
--   all_goals sorry-- by_cases h : m ‚â§ n

abbrev fromProfinite' {X : Profinite} {Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí LocallyConstant X (Y.diagram.obj ‚ü®n‚ü©))
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n) : X ‚ü∂ Y.toProfinite :=
  let _ : ‚àÄ n, TopologicalSpace (Y.diagram.obj ‚ü®n‚ü©) := ‚ä•
  fromProfinite (fun n ‚Ü¶ ‚ü®f n, (f n).2.continuous‚ü©) w

def homMk {X Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí X ‚ü∂ Y.component n)
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n) : X ‚ü∂ Y :=
  fromProfinite f w

abbrev homMk' {X Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí LocallyConstant X (Y.diagram.obj ‚ü®n‚ü©))
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n) : X ‚ü∂ Y :=
  let _ : ‚àÄ n, TopologicalSpace (Y.diagram.obj ‚ü®n‚ü©) := ‚ä•
  homMk (fun n ‚Ü¶ ‚ü®f n, (f n).2.continuous‚ü©) w

abbrev homMk'' {X Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí X ‚ü∂ Y.component n)
    (w : ‚àÄ n, f (n + 1) ‚â´ Y.transitionMap' n = f n) : X ‚ü∂ Y :=
  homMk f fun n ‚Ü¶ funext fun x ‚Ü¶ DFunLike.ext_iff.mp (w n) x

theorem extracted_3 {X : Profinite} {Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí X ‚ü∂ (Y.component n).toProfinite)
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n) (n : ‚Ñï) :
    (proj Y n) ‚àò (fromProfinite f w) = (f n) := by
  ext
  change (Y.isLimit.lift _ ‚â´ Y.cone.œÄ.app _) _ = _
  simp only [Functor.comp_obj, IsLimit.fac]
  rfl

lemma homMk_injective {X : Profinite} {Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí X ‚ü∂ (Y.component n).toProfinite)
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n)
    (h : ‚àÄ (a b : X), (‚àÄ n, f n a = f n b) ‚Üí a = b) : Function.Injective (fromProfinite f w) := by
  intro a b hab
  apply h a b
  intro n
  have : Y.proj n ‚àò fromProfinite f w = f n := extracted_3 f w n
  rw [‚Üê congrFun this a, ‚Üê congrFun this b]
  simp only [concreteCategory_forget_obj, Function.comp_apply]
  erw [hab]

theorem ext' {Y : LightProfinite} {a b : Y} (h : ‚àÄ n, Y.proj n a = Y.proj n b) : a = b :=
  ext fun n ‚Ü¶ h n.unop

-- theorem hom_ext {X Y : LightProfinite} (f g : X ‚ü∂ Y) (h ‚àÄ )

lemma homMk_surjective {X : Profinite} {Y : LightProfinite}
    (f : (n : ‚Ñï) ‚Üí X ‚ü∂ (Y.component n).toProfinite)
    (w : ‚àÄ n, Y.transitionMap n ‚àò f (n + 1) = f n)
    (h : ‚àÄ (a : Y) n, ‚àÉ (b : X), f n b = Y.proj n a) : Function.Surjective (fromProfinite f w) := by
  intro a
  replace h : ‚àÄ n, Set.Nonempty ((f n) ‚Åª¬π' {Y.proj n a}) := fun n ‚Ü¶ h a n
  have := IsCompact.nonempty_iInter_of_directed_nonempty_isCompact_isClosed _ ?_ h ?_ ?_
  ¬∑ obtain ‚ü®x, hx‚ü© := this
    refine ‚ü®x, ?_‚ü©
    apply ext'
    intro n
    have := congrFun (extracted_3 f w n) x
    simp only [concreteCategory_forget_obj, Function.comp_apply] at this
    erw [this]
    exact Set.mem_iInter.1 hx n
  ¬∑ apply directed_of_isDirected_le
    intro i j hij x
    simp only [concreteCategory_forget_obj, Set.mem_preimage, Set.mem_singleton_iff]
    intro hx
    erw [‚Üê congrFun (Y.proj_comp_transitionMapLE hij) a]
    simp only [concreteCategory_forget_obj, Function.comp_apply]
    rw [‚Üê hx]
    erw [‚Üê congrFun (extracted_3 f w j) x, ‚Üê congrFun (extracted_3 f w i) x]
    simp only [concreteCategory_forget_obj, Function.comp_apply]
    exact (congrFun (Y.proj_comp_transitionMapLE hij) _).symm
  ¬∑ exact fun i ‚Ü¶ (IsClosed.preimage (f i).2 isClosed_singleton).isCompact
  ¬∑ exact fun i ‚Ü¶ IsClosed.preimage (f i).2 isClosed_singleton

def locallyConstant_of_hom {X Y : LightProfinite} (f : X ‚ü∂ Y) (n : ‚Ñï) :
    LocallyConstant X (Y.diagram.obj ‚ü®n‚ü©) where
  toFun x := Y.proj n (f x)
  isLocallyConstant := by
    let _ : TopologicalSpace (Y.diagram.obj ‚ü®n‚ü©) := ‚ä•
    have : DiscreteTopology (Y.diagram.obj ‚ü®n‚ü©) := ‚ü®rfl‚ü©
    rw [IsLocallyConstant.iff_continuous]
    exact (f ‚â´ Y.proj n).continuous

def locallyConstant_of_hom_w {X Y : LightProfinite} (f : X ‚ü∂ Y) (n : ‚Ñï) :
    Y.transitionMap n ‚àò locallyConstant_of_hom f (n + 1) = locallyConstant_of_hom f n := by
  change Y.transitionMap n ‚àò (Y.proj _) ‚àò f = _
  simp [‚Üê Function.comp.assoc]
  erw [proj_comp_transitionMap]
  rfl

lemma eq_homMk {X Y : LightProfinite} (f : X ‚ü∂ Y) :
    f = homMk' (locallyConstant_of_hom f) (locallyConstant_of_hom_w f) := by
  apply Y.isLimit.hom_ext
  intro ‚ü®n‚ü©
  ext
  simp only [Functor.comp_obj, CategoryTheory.comp_apply, homMk', homMk, fromProfinite,
    locallyConstant_of_hom, concreteCategory_forget_obj, LocallyConstant.coe_mk, IsLimit.fac]
  rfl

universe u

variable (X : LightProfinite.{u}) (f : ‚Ñï ‚Üí ‚Ñï) (hf : Monotone f) (hf' : ‚àÄ n, (‚àÉ m, n ‚â§ f m))

noncomputable section

def reindex : LightProfinite where
  diagram := (Nat.functor f hf).op ‚ãô X.diagram
  cone := X.cone.whisker (Nat.functor f hf).op
  isLimit := ((initial f hf hf').isLimitWhiskerEquiv _).symm X.isLimit

def reindexIso : X ‚âÖ X.reindex f hf hf' := isoMk (Iso.refl _)

variable {X}

@[simps!]
def reindexHomMk {Y : Profinite} (g : (n : ‚Ñï) ‚Üí Y ‚ü∂ (X.component (f n)).toProfinite)
    (w : ‚àÄ n, X.transitionMapLE (hf (Nat.le_succ n)) ‚àò g (n + 1) = g n) : Y ‚ü∂ X.toProfinite :=
  fromProfinite (Y := X.reindex f hf hf') g w ‚â´ lightToProfinite.map (X.reindexIso f hf hf' |>.inv)
