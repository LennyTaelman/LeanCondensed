/-
Copyright (c) 2024 Dagur Asgeirsson. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Dagur Asgeirsson
-/
import Mathlib.Topology.Category.LightProfinite.Basic
import Mathlib.CategoryTheory.Filtered.Final
import Mathlib.CategoryTheory.Limits.Shapes.Countable
/-!

This file contains some constructions for functors from `‚Ñï`¬†and `‚Ñï·µí·µñ`, and natural transformations
between such functors.

Some similar material due to Jo√´l Riou is already in mathlib somewhere.
-/

universe u

open CategoryTheory Limits

namespace CategoryTheory

variable {C : Type*} [Category C]

def compose_n (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) {n m : ‚Ñï}
    (hh : n ‚â§ m) : f m ‚ü∂ f n :=
  Nat.leRecOn hh (fun g ‚Ü¶ h _ ‚â´ g) (ùüô _)

@[simp]
lemma compose_n_id (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) (n : ‚Ñï) :
    compose_n f h (le_refl n) = ùüô _ :=
  Nat.leRecOn_self _

@[simp]
lemma compose_n_succ (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) (n : ‚Ñï) :
    compose_n f h (Nat.le_succ n) = h n := by
  simp [compose_n, Nat.leRecOn_succ, Nat.leRecOn_self]

lemma compose_n_trans (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) {n m k : ‚Ñï} (h‚ÇÅ : n ‚â§ m)
    (h‚ÇÇ : m ‚â§ k) :
    compose_n f h (h‚ÇÅ.trans h‚ÇÇ) = compose_n f h h‚ÇÇ ‚â´ compose_n f h h‚ÇÅ := by
  induction h‚ÇÇ with
  | refl =>
    simp [compose_n, Nat.leRecOn_self _]
  | @step p h‚ÇÇ ih =>
    rw [compose_n, Nat.leRecOn_succ (h‚ÇÅ.trans h‚ÇÇ)]
    simp only [compose_n] at ih
    rw [ih, compose_n, compose_n, ‚Üê Category.assoc]
    congr
    exact (Nat.leRecOn_succ _ _).symm

@[simps! obj]
def Nat.functor_mk (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) :
    ‚Ñï·µí·µñ ‚•§ C where
  obj n := f n.unop
  map := @fun ‚ü®_‚ü© ‚ü®_‚ü© ‚ü®‚ü®‚ü®hh‚ü©‚ü©‚ü© ‚Ü¶ compose_n f h hh
  map_id _ := compose_n_id _ _ _
  map_comp _ _ := compose_n_trans _ _ _ _

@[simp]
lemma Nat.functor_mk_map_step (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f (n + 1) ‚ü∂ f n) (n : ‚Ñï) :
    (Nat.functor_mk f h).map (homOfLE n.le_succ).op = h n := by simp [Nat.functor_mk]

def compose_n' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) {n m : ‚Ñï}
    (hh : n ‚â§ m) : f n ‚ü∂ f m :=
  Nat.leRecOn hh (fun g ‚Ü¶ g ‚â´ h _) (ùüô _)

lemma compose_n_id' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) (n : ‚Ñï) :
    compose_n' f h (le_refl n) = ùüô _ :=
  Nat.leRecOn_self _

lemma compose_n_succ' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) (n : ‚Ñï) :
    compose_n' f h (Nat.le_succ n) = h n := by
  simp [compose_n', Nat.leRecOn_succ, Nat.leRecOn_self]

lemma compose_n_trans' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) {n m k : ‚Ñï} (h‚ÇÅ : n ‚â§ m)
    (h‚ÇÇ : m ‚â§ k) :
    compose_n' f h (h‚ÇÅ.trans h‚ÇÇ) = compose_n' f h h‚ÇÅ ‚â´ compose_n' f h h‚ÇÇ := by
  induction h‚ÇÇ with
  | refl =>
    simp [compose_n', Nat.leRecOn_self _]
  | @step p h‚ÇÇ ih =>
    rw [compose_n', Nat.leRecOn_succ (h‚ÇÅ.trans h‚ÇÇ)]
    simp only [compose_n'] at ih
    rw [ih, compose_n', compose_n', Category.assoc]
    congr
    rw [Nat.leRecOn_succ]

@[simps!]
def Nat.functor_mk' (f : ‚Ñï ‚Üí C) (h : (n : ‚Ñï) ‚Üí f n ‚ü∂ f (n + 1)) :
    ‚Ñï ‚•§ C where
  obj n := f n
  map := @fun _ _ ‚ü®‚ü®hh‚ü©‚ü© ‚Ü¶ compose_n' f h hh
  map_id _ := compose_n_id' _ _ _
  map_comp _ _ := compose_n_trans' _ _ _ _

@[simps]
def natTrans_nat_mk {F G : ‚Ñï ‚•§ C} (f : (n : ‚Ñï) ‚Üí F.obj n ‚ü∂ G.obj n)
    (w : ‚àÄ n, F.map (homOfLE (Nat.le_succ _)) ‚â´ f (n + 1) = f n ‚â´ G.map (homOfLE (Nat.le_succ _))) :
    F ‚ü∂ G where
  app n := f n
  naturality n m h := by
    have h' : n ‚â§ m := leOfHom h
    induction h' with
    | refl =>
      change F.map (ùüô _) ‚â´ _ = _ ‚â´ G.map (ùüô _)
      simp
    | @step k a ih =>
      have a' : n ‚â§ k := a
      have : h = homOfLE a' ‚â´ homOfLE (Nat.le_succ k) := rfl
      simp only [this, Functor.map_comp, Category.assoc]
      rw [w k, ‚Üê Category.assoc, ih (homOfLE _)]
      simp

@[simps]
def natTrans_nat_op_mk {F G : ‚Ñï·µí·µñ ‚•§ C}
    (f : (n : ‚Ñï) ‚Üí F.obj ‚ü®n‚ü© ‚ü∂ G.obj ‚ü®n‚ü©)
    (w : ‚àÄ n, F.map ‚ü®homOfLE (Nat.le_succ _)‚ü© ‚â´ f n = f (n + 1) ‚â´ G.map ‚ü®homOfLE (Nat.le_succ _)‚ü©) :
    F ‚ü∂ G where
  app := fun ‚ü®n‚ü© ‚Ü¶ f n
  naturality := by
    intro ‚ü®n‚ü© ‚ü®m‚ü© h
    have h' : m ‚â§ n := leOfHom h.unop
    induction h' with
    | refl =>
      change F.map (ùüô _) ‚â´ _ = _ ‚â´ G.map (ùüô _)
      simp
    | @step k a ih =>
      have a' : m ‚â§ k := a
      have : h = (homOfLE a' ‚â´ homOfLE (Nat.le_succ k)).op := rfl
      rw [op_comp] at this
      simp only [this, Functor.map_comp, Category.assoc]
      rw [ih, ‚Üê Category.assoc]
      have := w k
      change F.map (homOfLE _).op ‚â´ _ = _ at this
      rw [this, Category.assoc]
      rfl

@[simps]
def Functor.nat_op_cone_mk (F : ‚Ñï·µí·µñ ‚•§ C) (X : C) (f : (n : ‚Ñï) ‚Üí X ‚ü∂ F.obj ‚ü®n‚ü©)
    (h : ‚àÄ n, f (n+1) ‚â´ F.map (homOfLE (Nat.le_succ n)).op = f n) : Cone F where
  pt := X
  œÄ := natTrans_nat_op_mk f fun n ‚Ü¶ (by simpa using (h n).symm)

variable (g : ‚Ñï ‚Üí ‚Ñï) (hg : Monotone g) (hg' : ‚àÄ n, (‚àÉ m, n ‚â§ g m))

@[simps!]
def Nat.functor : ‚Ñï ‚•§ ‚Ñï := Nat.functor_mk' g (fun n ‚Ü¶ homOfLE (hg (Nat.le_succ n)))

lemma final : (Nat.functor g hg).Final := by
  rw [Functor.final_iff_of_isFiltered]
  refine ‚ü®fun n ‚Ü¶ ?_, fun _ _ ‚Ü¶ ‚ü®_, ùüô _, rfl‚ü©‚ü©
  obtain ‚ü®m, hm‚ü© := hg' n
  exact ‚ü®m, ‚ü®homOfLE hm‚ü©‚ü©

lemma initial : (Nat.functor g hg).op.Initial :=
  have := final g hg hg'
  Functor.initial_op_of_final _

@[simps!]
noncomputable
def Functor.nat_op_cone_mk' (F : ‚Ñï·µí·µñ ‚•§ C) (X : C) (f : (n : ‚Ñï) ‚Üí (X ‚ü∂ F.obj ‚ü®g n‚ü©))
    (h : ‚àÄ n, f (n+1) ‚â´ F.map (homOfLE (hg (Nat.le_succ n))).op = f n) : Cone F :=
  have := initial g hg hg'
  (Functor.Initial.conesEquiv (Nat.functor g hg).op _).functor.obj
    (Functor.nat_op_cone_mk _ X f h)

def f_initial (F : ‚Ñï·µí·µñ ‚•§ C) (X : C) (m : ‚Ñï) (f : (n : ‚Ñï) ‚Üí m ‚â§ n ‚Üí (X ‚ü∂ F.obj ‚ü®n‚ü©)) :
    let g := fun n : ‚Ñï ‚Ü¶ max m n
    (n : ‚Ñï) ‚Üí X ‚ü∂ F.obj ‚ü®g n‚ü© :=
  fun n ‚Ü¶ f (max m n) (le_max_left _ _)

end CategoryTheory
